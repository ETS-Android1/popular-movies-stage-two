package com.example.android.flixt.view.ui;import android.content.ContentUris;import android.content.ContentValues;import android.content.Intent;import android.database.Cursor;import android.net.Uri;import android.os.Bundle;import android.support.annotation.NonNull;import android.support.design.widget.AppBarLayout;import android.support.design.widget.CollapsingToolbarLayout;import android.support.design.widget.FloatingActionButton;import android.support.v4.app.FragmentManager;import android.support.v4.content.ContextCompat;import android.support.v7.app.AppCompatActivity;import android.support.v7.widget.Toolbar;import android.util.Log;import android.view.View;import android.widget.ImageView;import android.widget.RelativeLayout;import android.widget.Toast;import com.example.android.flixt.R;import com.example.android.flixt.data.MovieContract.MovieEntry;import com.example.android.flixt.service.model.Movie;import com.example.android.flixt.service.model.Video;import com.example.android.flixt.service.model.VideoResponse;import com.example.android.flixt.service.repository.AppDataRepository;import com.example.android.flixt.service.repository.PrivateApiKey;import com.example.android.flixt.service.repository.TmdbApiService;import com.squareup.picasso.Picasso;import java.util.List;import butterknife.BindView;import butterknife.ButterKnife;import butterknife.OnClick;import retrofit2.Call;import retrofit2.Callback;import retrofit2.Response;public class DetailActivity		extends AppCompatActivity		implements AppBarLayout.OnOffsetChangedListener, View.OnClickListener {	@BindView(R.id.app_bar_layout)	AppBarLayout mAppBar;	@BindView(R.id.collapsing_toolbar_layout)	CollapsingToolbarLayout mCollapsingToolbar;	@BindView(R.id.toolbar)	Toolbar mToolbar;	@BindView(R.id.movie_backdrop)	ImageView mMovieBackdrop;	@BindView(R.id.fav_fab)	FloatingActionButton mFavFab;	@BindView(R.id.movie_poster_iv)	ImageView mSuspendedPoster;	@BindView(R.id.poster_container)	RelativeLayout mPosterContainer;	private Movie mMovie;	private List<Video> mVideos;	private boolean mIsFavorite;	private static final String BACKDROP_IMAGE_BASE_URL = "https://image.tmdb.org/t/p/";	private static final String BACKDROP_IMAGE_SIZE = "w780";	private static final String TAG = DetailActivity.class.getSimpleName();	private static final int FAB_NOT_FAVORITE = 0;	private static final int FAB_FAVORITE = 1;	private static final int FAB_DISAPPEAR_OFFSET = 380;	private static final String FAB_TAG = "FabTag";	private static final String FAVORITE_STATUS = "FavStatus";	@Override	protected void onCreate(Bundle savedInstanceState) {		super.onCreate(savedInstanceState);		setContentView(R.layout.activity_detail);		ButterKnife.bind(this);		mMovie = getIntent().getParcelableExtra("Movie");		if (savedInstanceState == null) {			FragmentManager fragmentManager = getSupportFragmentManager();			DetailFragment detailFragment = new DetailFragment();			fragmentManager.beginTransaction()					.add(R.id.fancy_grid_fragment, detailFragment)					.commit();		} else {			mIsFavorite = savedInstanceState.getBoolean(FAVORITE_STATUS);		}		// Views initialization		setupToolbar();		setupFavFab(savedInstanceState);		mAppBar.addOnOffsetChangedListener(this);		setupBackdrop();		setupMinPoster();	}	private void setupToolbar() {		setSupportActionBar(mToolbar);		if (getSupportActionBar() != null) {			getSupportActionBar().setDisplayHomeAsUpEnabled(true);			getSupportActionBar().setDisplayShowHomeEnabled(true);			mToolbar.setNavigationOnClickListener(view -> onBackPressed());		}		mCollapsingToolbar.setTitle(mMovie.getTitle());		mCollapsingToolbar.setExpandedTitleColor(ContextCompat.getColor(this, android.R.color.transparent));		setTitle("");	}	private void setupBackdrop() {		String backdropImagePath = BACKDROP_IMAGE_BASE_URL + BACKDROP_IMAGE_SIZE + mMovie.getBackdropPath();		Picasso.with(this)				.load(backdropImagePath)				.into(mMovieBackdrop);	}	private void setupFavFab(Bundle savedInstance) {		if (savedInstance == null) {			String[] projection = { MovieEntry.ID };			String selection = MovieEntry.ID + " = ? ";			String[] selectionArgs = new String[]{ String.valueOf(mMovie.getId()) };			Cursor cursor = getContentResolver()					.query(							MovieEntry.CONTENT_URI,							projection,							selection,							selectionArgs,							null					);			if (cursor != null && cursor.getCount() > 0) {				mIsFavorite = true;				cursor.close();			}		}		mFavFab.setTag(mIsFavorite ? FAB_FAVORITE : FAB_NOT_FAVORITE);		// Set image per favorite status		int favStatus = (int) mFavFab.getTag();		if (favStatus == FAB_FAVORITE) {			mFavFab.setImageResource(R.drawable.ic_favorite_filled);		} else {			mFavFab.setImageResource(R.drawable.ic_favorite_border);		}	}	@OnClick(R.id.fav_fab)	void onFavFabClicked() {		int id = (int) mFavFab.getTag();		int moviesInDatabase;		switch (id) {			case FAB_NOT_FAVORITE:				// Like movie				addMovieToDb();				mFavFab.setImageResource(R.drawable.ic_favorite_filled);				mIsFavorite = true;				break;			case FAB_FAVORITE:				// Dislike movie				getContentResolver().delete(						ContentUris.withAppendedId(MovieEntry.CONTENT_URI, mMovie.getId()),						null,						null				);				mFavFab.setImageResource(R.drawable.ic_favorite_border);				mIsFavorite = false;				break;			default:				// Undefined		}		moviesInDatabase = getMoviesInDatabase();		Log.d(TAG, "No of movies in database = " + moviesInDatabase);		mFavFab.setTag(mIsFavorite ? FAB_FAVORITE : FAB_NOT_FAVORITE);	}	private int getMoviesInDatabase() {		int moviesInDatabase = 0;		String[] projection = { MovieEntry.ID };		Cursor cursor = getContentResolver().query(				MovieEntry.CONTENT_URI,				projection,				null,				null,				null		);		if (cursor != null) {			moviesInDatabase = cursor.getCount();			cursor.close();		}		return moviesInDatabase;	}	private void addMovieToDb() {		ContentValues values = new ContentValues();		values.put(MovieEntry.ID, mMovie.getId());		values.put(MovieEntry.TITLE, mMovie.getTitle());		values.put(MovieEntry.POSTER_PATH, mMovie.getPosterPath());		values.put(MovieEntry.BACKDROP_PATH, mMovie.getBackdropPath());		values.put(MovieEntry.OVERVIEW, mMovie.getOverview());		values.put(MovieEntry.RELEASE_DATE, mMovie.getReleaseDate());		values.put(MovieEntry.VOTE_AVERAGE, mMovie.getVoteAverage());		values.put(MovieEntry.VOTE_COUNT, mMovie.getVoteCount());		values.put(MovieEntry.POPULARITY, mMovie.getPopularity());		values.put(MovieEntry.ORIGINAL_TITLE, mMovie.getOriginalTitle());		getContentResolver().insert(MovieEntry.CONTENT_URI, values);	}	@Override	protected void onSaveInstanceState(Bundle outState) {		int tag = (int) mFavFab.getTag();		outState.putInt(FAB_TAG, tag);		outState.putBoolean(FAVORITE_STATUS, mIsFavorite);		super.onSaveInstanceState(outState);	}	@Override	public void onOffsetChanged(AppBarLayout appBarLayout, int verticalOffset) {		// Log.d(LOG_TAG, "Offset at " + verticalOffset + " Toolbar height: " + mToolbar.getHeight());		if (Math.abs(verticalOffset) >= FAB_DISAPPEAR_OFFSET) {			// Verge of fully collapsing			mPosterContainer.setVisibility(View.GONE);			// Diminish left margin for adjacent views		} else {			// Moment FAB is visible			mPosterContainer.setVisibility(View.VISIBLE);		}	}	private void setupMinPoster() {		String minPosterUrl = BACKDROP_IMAGE_BASE_URL + BACKDROP_IMAGE_SIZE + mMovie.getPosterPath();		Picasso.with(this)				.load(minPosterUrl)				.into(mSuspendedPoster);		mPosterContainer.setOnClickListener(this);		TmdbApiService restAdapter = AppDataRepository.getInstance().getTmdbApiService();		restAdapter.getVideos(mMovie.getId(), PrivateApiKey.YOUR_API_KEY).enqueue(new Callback<VideoResponse>() {			@Override			public void onResponse(@NonNull Call<VideoResponse> call, @NonNull Response<VideoResponse> response) {				if (response.isSuccessful()) {					VideoResponse rootResponse = response.body();					if (rootResponse != null) {						mVideos = rootResponse.getVideos();					}				}			}			@Override			public void onFailure(@NonNull Call<VideoResponse> call, @NonNull Throwable t) {				Log.d(TAG, t.toString());				t.getStackTrace();			}		});	}	@Override	public void onClick(View view) {		Intent playTrailerIntent = new Intent(Intent.ACTION_VIEW);		if (mVideos != null && mVideos.size() > 0) {			Uri videoUri = Uri.parse("http://www.youtube.com/watch?v=" + mVideos.get(0).getKey()); // First video set as trailer			playTrailerIntent.setData(videoUri);			Log.d(TAG, "YouTube URL - " + videoUri.toString());		} else {			Toast.makeText(this, "Video trailer currently unavailable!", Toast.LENGTH_SHORT).show();		}		startActivity(playTrailerIntent);	}}